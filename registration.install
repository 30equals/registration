<?php

/**
 * @file
 * Schema and installation hooks for registration module.
 */

/**
 * Implements hook_schema().
 */
function registration_schema() {
  $schema['registration'] = array(
    'description' => 'The base table for registration module.',
    'fields' => array(
      'registration_id' => array(
        'description' => 'The primary identifier for a registration.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {registration_type}.type of this registration.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The id of the entity this registration is associated with.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'user_uid' => array(
        'description' => 'The uid of the Drupal user connected to this registration.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'author_uid' => array(
        'description' => 'The uid of the user who created this registration.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the registration was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the registration was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'registration_updated'       => array('updated'),
      'registration_created'       => array('created'),
      'registration_type'          => array(array('type', 4)),
    ),
    'foreign keys' => array(
      'registration_node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'registration_author' => array(
        'table' => 'users',
        'columns' => array('author_uid' => 'uid'),
      ),
      'registration_user' => array(
        'table' => 'users',
        'columns' => array('user_uid' => 'uid'),
      ),
    ),
    'primary key' => array('registration_id'),
  );


	$schema['registration_node'] = array(
	  'description' => 'Registration per-entity settings.',
	  'fields' => array(
	    'nid' => array(
	      'description' => 'Node id these registration settings are for.',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'notification_email' => array(
	      'description' => 'Email address to send notifications to.',
	      'type' => 'varchar',
	      'length' => 64,
	      'not null' => FALSE,
	    ),
	    'send_confirmation' => array(
	      'description' => 'Boolean indicating whether confirmation emails should be sent.',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'confirmation_email' => array(
	      'description' => 'Email template to send to users when they signup.',
	      'type' => 'text',
	      'size' => 'big',
	      'not null' => TRUE,
	    ),
	    'limit' => array(
	      'description' => 'Maximum number of users who can signup for this event.',
	      'type' => 'int',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'default' => 0,
	    ),
	    'status' => array(
	      'description' => 'Boolean indicating if signups are open (1) or closed (0) for the given node',
	      'type' => 'int',
	      'not null' => TRUE,
	      'default' => 1,
	    ),
	  ),
	  'foreign keys' => array(
	    'registration_node_node' => array(
	      'table' => 'node',
	      'columns' => array('nid' => 'nid'),
	    ),
	  ),
	  'primary key' => array('nid'),
	);

  return $schema;
}
