<?php

/**
 * Implements hook_entity_info().
 */
function registration_entity_info() {    
  return array(
    'registration' => array(
      'module' => 'registration',
      'label' => t('Registration'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'RegistrationEntityClass',
      'base table' => 'registration',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'registration_id',
        'bundle' => 'type',
        'label' => 'title',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(
        'registration'=> array(
          'label' => 'Registration',
          'admin' => array(
            'path' => 'admin/structure/registration/manage',
            'access arguments' => array('administer registration'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full Registration'),
          'custom settings' =>  FALSE,
        ),
      ),
      'uri callback' => 'registration_uri',
      'token type' => 'registration',
      'managed' => TRUE,
    ),
  );
}

function registration_uri($registration){
  return array(
    'path' => 'registration/' . $registration->id,
  );
}

/**
 * Loads a registration by ID.
 */
function registration_load($registration_id) {
  if (empty($registration_id)) {
    return FALSE;
  }

  $registrations = registration_load_multiple(array($registration_id), array());
  return $registrations ? reset($registrations) : FALSE;
}

/**
 * Loads multiple registrations by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $registration_ids
 * @param $conditions
 *   An array of conditions on the {redhen_contact} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal contact loading cache.
 *
 * @return
 *   An array of contact objects indexed by registration_id.
 */
function registration_load_multiple($registration_ids = array(), $conditions = array(), $reset = FALSE) {
  if (empty($registration_ids) && empty($conditions)) {
    return array();
  }

  return entity_load('registration', $registration_ids, $conditions, $reset);
}

/**
 * Deletes multiple registrations by ID.
 *
 * @param $registration_ids
 *   An array of contact IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function registration_delete_multiple($registration_ids) {
  return entity_get_controller('registration')->delete($registration_ids);
}

/**
 * Saves a registration.
 *
 * @param $registration
 *   The full contact object to save.
 *
 * @return
 *   The saved registration object.
 */
function registration_save($registration) {
  $registration->updated = REQUEST_TIME;
  // Set the creation timestamp if not set.
  if (!isset($registration->created) || empty($registration->created)) {
    $registration->created = REQUEST_TIME;
  }
  
  return entity_get_controller('registration')->save($registration);
}

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration/manage'] = array(
    'title' => 'Registration Admin',
    'description' => 'Manage Registration structure',
    'page callback' => 'registration_admin_page',
    'access arguments' => array('administer registration'),
  );
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/edit'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'registration.forms.inc',
  );
  $items['registration/%registration/delete'] = array(
    'title callback' => 'Delete Registratino',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'registration.forms.inc',
  );  

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  return array(
    'administer registration' =>  array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'view registration' => array(
      'title' => t('View registrations'),
    ),
    'add registration' => array(
      'title' => t('Add registrations'),
    )
  );
}

/**
 * Landing page for managing the structure of registrations.
 */
function registration_admin_page() {
  return t('Manage extra fields for your registration here.');
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  // use the node title in the registration page title
  if ($node = node_load($registration->nid)) {
    return t('Registration for @title', array('@title' => $node->title));
  }
}

/**
 * Main class for test entities.
 */
class RegistrationEntityClass extends Entity {

  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, 'registration');
  }

  /**
   * Override buildContent() to add the username to the output.
   */
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    if ($node = node_load($this->nid)) {
      $content['nid'] = array(
        '#prefix' => '<div>',        
        '#markup' => "Tour: " . l($node->title, 'node/' . $this->nid),
        '#suffix' => '</div>',        
        '#weight' => 10
      );      
    }
    $content['created'] = array(
      '#markup' => "Created: ". format_date($this->created),
      '#weight' => 10
    );

    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function registration_entity_property_info_alter(&$info) {
  $properties = &$info['registration']['properties'];

  // Convert timestamps props to dates
  $properties['created'] = array(
    'label' => t("Created"),
    'description' => t("The date the registration was created."),
    'type' => 'date',
    'schema field' => 'created',
  );
  $properties['updated'] = array(
    'label' => t("Updated"),
    'description' => t("The date the registration was updated."),
    'type' => 'date',
    'schema field' => 'updated',
  );
  $properties['nid'] = array(
    'label' => t("Node"),
    'description' => t("The node this registration is associated with."),
    'type' => 'node',
    'schema field' => 'nid',
  );

  return $info;
}
