<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration/manage'] = array(
    'title' => 'Registration',
    'description' => 'Manage Registration structure',
    'page callback' => 'registration_admin_page',
    'access arguments' => array('administer registration'),

  );
  $items['admin/structure/registration/manage/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Registration settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/view'] = array(
    'title' => 'View',
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['registration/%registration/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['registration/%registration/delete'] = array(
    'title' => 'Delete Registration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'includes/registration.forms.inc',
  );

  // entity local tasks
  $entities = entity_get_info();
  foreach ($entities as $type => $data) {
    if (!empty($data['bundles']) && !in_array($type, array('registration', 'registration_type'))) {
      $items[$type . '/%entity_object/register'] = array(
        'load arguments' => array($type),
        'title' => 'Register',
        'page callback' => 'registration_register_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_register_page_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations'] = array(
        'load arguments' => array($type),
        'title' => 'Manage Registrations',
        'page callback' => 'registration_registrations_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/list'] = array(
        'load arguments' => array($type),
        'title' => 'Registrations',
        'page callback' => 'registration_registrations_page',
        'page arguments' => array(0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'type' => MENU_DEFAULT_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/settings'] = array(
        'load arguments' => array($type),
        'title' => 'Settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_registrations_settings_form', 0, 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'weight' => 9,
        'type' => MENU_LOCAL_TASK,
      );
      $items[$type . '/%entity_object/registrations/broadcast'] = array(
        'load arguments' => array($type),
        'title' => 'Email Registrants',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('registration_registrations_broadcast_form', 1),
        'access callback' => 'registration_administer_registrations_access',
        'access arguments' => array(0, 1),
        'file' => 'includes/registration.forms.inc',
        'weight' => 10,
        'type' => MENU_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  return array(
    'administer registration' => array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'administer registration types' => array(
      'title' => t('Administer registration types'),
      'description' => t('Manage registration types, fields, and display settings.'),
      'restrict access' => TRUE,
    ),
    'view registration' => array(
      'title' => t('View registrations'),
    ),
    'add registration' => array(
      'title' => t('Add registrations'),
    ),
  );
}

/**
 * Landing page for managing the structure of registrations.
 */
function registration_admin_page() {
  $rows = array();
  foreach (node_type_get_names() as $type => $name) {
    $rows[] = array(
      l($name, 'admin/structure/types/manage/' . $type),
      (variable_get('registration_node_status_' . $type, 0)) ? t('Enabled') :
      t('Disabled'),
    );
  }

  $table = array(
    'header' => array(t('Content type'), t('Registration status')),
    'rows' => $rows,
  );
  $out = theme('table', $table);

  return t('The following table lists the registration status for each content 
		type. You can enable/disable registrations from the content type settings 
		page. You can also !manage_fields and their !display_settings.', 
		array(
			'!manage_fields' => l('manage registration fields', 'admin/structure/registration/manage/fields'),
			'!display_settings' => l('display settings', 'admin/structure/registration/manage/display'),
		)) . $out;
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  $title = '';
  // use the entity title in the registration page title
  if ($entity = entity_load($registration->entity_type, $registration->entity_id)) {
    $title = t('Registration for @title', array(
      '@title' => entity_label($registration->entity_type, $entity))
    );
  }
  return $title;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 	 Add registration options to node type form.
 */
function registration_form_node_type_form_alter(&$form, &$form_state) {
  $type = $form['#node_type']->type;

  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration settings'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['registration']['registration_node_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable registrations for this content type'),
    '#default_value' => variable_get('registration_node_status_' . $type, 0),
    '#description' => t('If enabled, users will be allowed to register for this 
			content type unless an administrator disbles registrations on specific 
			posts.'),
  );
}

/**
 * Implements hook_node_type_delete().
 */
function registration_node_type_delete($info) {
  variable_del('registration_node_status' . $info->type);
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($entity_type, $entity) {
  $ret = FALSE;

  list($entity_id, , $bundle) = entity_extract_ids($entity_type, $entity);

  if (registration_get_entity_registration_type($entity_type, $bundle)) {
    if (user_access('administer registration') || user_access('add registration')) {
      $settings = registration_entity_settings($entity_id, $entity_type);
      if ($settings['status']) {
        $ret = TRUE;
      }
    }
  }

  return $ret;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($entity_type, $entity) {
  list(, , $bundle) = entity_extract_ids($entity_type, $entity);
  $ret = FALSE;
  if (registration_get_entity_registration_type($entity_type, $bundle)) {
    if (user_access('administer registration')) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Page callback for adding a registration.
 */
function registration_register_page($entity_type, $entity) {
  list($entity_id, ,$bundle) = entity_extract_ids($entity_type, $entity);
  if (registration_has_room($entity_id, $entity_type)) {
    $registration_type = registration_get_entity_registration_type($entity_type, $bundle);
    $registration = entity_get_controller('registration')->create(array('type' => $registration_type));
    $registration->entity_id = $entity_id;
    $registration->entity_type = $entity_type;
    return drupal_get_form('registration_form', $registration);
  }
  else {
    return t('Sorry, %name is sold out', array('%name' => entity_label($entity_type, $entity)));
  }
}

/**
 * Page callback for viewing registrations
 */
function registration_registrations_page($entity_type, $entity) {
	$header = array(
		array('data' => t('id'), 'field' => 'registration_id', 'type' => 'property', 
				'specifier' => 'registration_id'),
		array('data' => t('Email'), 'field' => 'mail', 'type' => 'property', 
				'specifier' => 'mail'),
		array('data' => t('Created By'), 'field' => 'author_uid', 
				'type' => 'property', 'specifier' => 'author_uid'),
		array('data' => t('Count'), 'field' => 'count', 'type' => 'property', 
				'specifier' => 'count'),
		array('data' => t('Created'), 'field' => 'created', 'sort' => 'desc', 
				'type' => 'property', 'specifier' => 'created'),
		array('data' => t('Actions')),
	);

  list($entity_id, ,) = entity_extract_ids($entity_type, $entity);
  $label = entity_label($entity_type, $entity);

  $query = new EntityFieldQuery;
  $result = $query
		->entityCondition('entity_type', 'registration')
		->propertyCondition('entity_id', $entity_id)
    ->propertyCondition('entity_type', $entity_type)
		->pager(20)
		->tableSort($header)
		->execute();
		
  if (!empty($result['registration'])) {
    $registrations = registration_load_multiple(array_keys($result['registration']));

    $rows = array();
    foreach ($registrations as $registration) {
      $author = '';
      if ($registration->author_uid) {
        $author = user_load($registration->author_uid);
        $author = l($author->name, 'user/' . $author->uid);
      }
			$actions = array(
				l('View', 'registration/' . $registration->registration_id),
				l('Edit', 'registration/' . $registration->registration_id . '/edit'),
				l('Delete', 'registration/' . $registration->registration_id . '/delete'),
			);
      $rows[] = array(
        l($registration->registration_id, 'registration/' . $registration->registration_id),
        l($registration->mail, 'mailto:' . $registration->mail),
        $author,
        $registration->count,
        format_date($registration->created),
				implode(' | ', $actions)
      );
    }

		$settings = registration_entity_settings($entity_id, $entity_type);
				
    $table = array(
      'header' => $header,
      'rows' => $rows,
			'caption' => t('List of registrations for %title. !count of !capacity slots are filled.', 
				array(
					'%title' => $label,
 					'!count' => '<strong>' . registration_event_count($entity_id, $entity_type) . '</strong>',
					'!capacity' => '<strong>' . $settings['capacity'] . '</strong>'
				))
    );

    $out = theme('table', $table) . theme('pager');
  }
  else {
    $out = t('There are no registrants for %name',
				array('%name' => $label));
  }

  return $out;
}

/**
 * Helper to determine if an entity has any slots left.
 */
function registration_has_room($entity_id, $entity_type) {
  $ret      = TRUE;
  $settings = registration_entity_settings($entity_id, $entity_type);
  $capacity = $settings['capacity'];
  if ($capacity) {
    $count = registration_event_count($entity_id, $entity_type);
    if (($capacity - $count) < 1) {
      $ret = FALSE;
    }
  }

  return $ret;
}

/**
 * Return the number of registrations for a given entity.
 *
 * @param int $nid
 *
 * @return int
 */
function registration_event_count($entity_id, $entity_type) {
	$count = &drupal_static(__FUNCTION__, FALSE);
	if (!$count) {
	  $count = db_query("SELECT sum(count) FROM {registration} WHERE entity_id = :entity_id AND entity_type = :entity_type",
	    array(':entity_id' => $entity_id, ':entity_type' => $entity_type)
	  )->fetchField();		
	}
  return $count;
}

/**
 * Implements hook_entity_delete().
 *   Delete registrations and settings for this entity.
 */
function registration_entity_delete($entity, $type) {
  list($entity_id) = entity_extract_ids($type, $entity);
  db_delete('registration')
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $type)
    ->execute();
  db_delete('registration_entity')
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $type)
    ->execute();
}

/**
 * Return all registration settings for a given entity.
 *
 * @param string $nid
 *
 * @return array
 */
function registration_entity_settings($entity_id, $entity_type) {
  // @TODO: Add static variable handling.
  $result = db_select('registration_entity', 're')
		->fields('re')
		->condition('entity_id', $entity_id, '=')
    ->condition('entity_type', $entity_type, '=')
		->execute()
		->fetchAssoc();

	if ($result) {
		$result['settings'] = unserialize($result['settings']);		
	}
	
  return $result;
}

/**
 * Implements hook_theme().
 */
function registration_theme() {
  return array(
    'registration' => array(
      'arguments' => array('registration' => NULL),
    ),
  );
}

/**
 * Theme handler for registrations.
 *
 * @param array $variables
 * 	 Contains a complete registration object.
 */
function theme_registration($variables) {
  $registration = $variables['registration'];
  $output = '<div><label>' . t('Email') . '</label>' . $registration->mail . '</div>';
  if ($entity = entity_load($registration->entity_type, $registration->entity_id)) {
    $label = entity_label($registration->entity_type, $entity);
    $uri = entity_uri($registration->entity_type, $entity);
    $output .= '<div><label>' . $registration->entity_type . "</label>" .
        l($label, $uri['path']) . '</div>';
  }

  $output .= '<div><label>' . t('Count') . '</label>' . $registration->count . '</div>';
  $output .= '<div><label>' . t('Created') . '</label>' . format_date($registration->created) . '</div>';

  return $output;
}

/**
 * Implements hook_mail().
 */
function registration_mail($key, &$message, $params) {
  $subject = $params['subject'];
  $body = $params['message'];
  $message['subject'] .= str_replace(array("\r", "\n"), '', $subject);
  $message['body'][] = drupal_html_to_text($body);
}

/**
 * Send an email to all registrations for a given entity.
 *
 * @param object $entity
 */
function registration_send_broadcast($entity_type, $entity_id, $subject, $message) {
  global $language;

	// grab registration entity settings
	$settings = registration_entity_settings($entity_id, $entity_type);
	$from = $settings['settings']['from_address'];

  // grab all registrations
  $query = new EntityFieldQuery();
  $entities = $query
		->entityCondition('entity_type', 'registration')
		->entityCondition('bundle', 'registration')
		->propertyCondition('entity_id', $entity_id)
    ->propertyCondition('entity_type', $entity_type)
		->execute();

  if (!empty($entities)) {
    $recipients = array();

    $params = array(
      'subject' => $subject,
      'message' => $message,
    );

    // load registrations and build an array of recipients
    $registrations = registration_load_multiple(
      array_keys($entities['registration'])
    );

    // send the email to each registrant and communicate results
		$success_count = 0;
    foreach ($registrations as $registration) {
      $recipients[] = $registration->mail;
	    $result = drupal_mail('registration', 'broadcast',
	      $registration->mail, $language, $params, $from
	    );
    	if ($result['result']) {
				$success_count++;
			}
			else {
				watchdog('registration', 'Failed to send registration broadcast email to %email.',
					array('%email' => $registration->mail), 'WATCHDOG_ERROR'
				);
			}
    }

    if ($success_count) {
      drupal_set_message(t('Registration broadcast sent to @count registrants.',
        array('@count' => $success_count)
      ));
			watchdog('registration', 'Registration broadcast sent to @count registrants.',
				array('@count' => $success_count)
			);
    }
  }
  else {
    drupal_set_message(
      t('There are no participants registered for this %type.', 
					array('%type' => $node->type)),
      $type = 'warning'
    );
  }
}

/**
 * Update an entity's registration settings.
 *
 * @param int $nid 
 * @param array $settings
 * 		Associative array containing additional entity registration settings.
 *    Keys are status, capacity, send_reminder, reminder_date, reminder_template
 *    and an associative array of additional settings.
 */
function registration_update_entity_settings($entity_id, $entity_type, $settings) {
	// insert or update registration entity settings
	db_merge('registration_entity')
    ->key(array(
      'entity_id' => $entity_id,
      'entity_type' => $entity_type
    ))
	  ->fields($settings)
	  ->execute();

  drupal_set_message(t('Registration settings have been saved.'));	
}

/**
 * Implements hook_cron().
 */
function registration_cron() {
	//@TODO: need to have a sensible batch limit, passed in as a limit param
	
	// grab all registrations that have reminders set for this day
	$results = db_select('registration_entity', 're')
		->fields('re')
		->condition('send_reminder', 1)
		->condition('reminder_date', date('Y-m-d 00:00:00'))
		->range(0, 10)
		->execute()
		->fetchAllAssoc('entity_id');

	foreach ($results as $result) {
		$entity = entity_load($result->entity_id, $result->entity_type);
		$message = $result->reminder_template;
		if (module_exists('token')) {
			$message = token_replace($message, array($result->entity_type => $entity));
		}
		$subject = 'Reminder for ' . $entity->label();
		registration_send_broadcast($entity, $subject, $message);
		
		// set reminder flag to off
		db_update('registration_entity')
			->fields(array('send_reminder' => 0))
			->condition('entity_id', $result->entity_id)
      ->condition('entity_type', $result->entity_type)
			->execute();
	}
}

function registration_get_entity_registration_type($entity_type, $bundle) {
  return variable_get("registration_{$entity_type}_{$bundle}_status", FALSE);
}
