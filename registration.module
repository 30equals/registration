<?php

/**
 * @file
 * Module file for registrations.
 */

module_load_include('inc', 'registration', 'includes/registration.entity');

/**
 * Implements hook_menu().
 */
function registration_menu() {
  $items['admin/structure/registration/manage'] = array(
    'title' => 'Registration',
    'description' => 'Manage Registration structure',
    'page callback' => 'registration_admin_page',
    'access arguments' => array('administer registration'),
  );
  $items['admin/structure/registration/manage/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage Registration settings',
		'type' => MENU_DEFAULT_LOCAL_TASK
  );
  $items['registration/%registration'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'registration_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view registration'),
  );
  $items['registration/%registration/edit'] = array(
    'title callback' => 'registration_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_form', 1),
    'access arguments' => array('administer registration'),
    'file' => 'registration.forms.inc',
  );
  $items['registration/%registration/delete'] = array(
    'title callback' => 'Delete Registratino',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registration_delete_confirm', 1),
    'access arguments' => array('administer registration'),
    'file' => 'registration.forms.inc',
  );  

	$items['node/%node/register'] = array(
	  'title' => 'Register',
	  'page callback' => 'registration_register_page',
	  'page arguments' => array(1),
	  'access callback' => 'registration_register_page_access',
	  'access arguments' => array(1),
	  'file' => 'registration.forms.inc',
	  'type' => MENU_LOCAL_TASK,
	);
	$items['node/%node/registrations'] = array(
	  'title' => 'Registrations',
	  'page callback' => 'registration_registrations_page',
	  'page arguments' => array(1),
	  'access callback' => 'registration_administer_registrations_access',
	  'access arguments' => array(1),
	  'type' => MENU_LOCAL_TASK,
	);
	$items['node/%node/registrations/broadcast'] = array(
	  'title' => 'Email Participants',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('registration_registrations_broadcast_form', 1),
	  'access callback' => 'registration_administer_registrations_access',
	  'access arguments' => array(1),    
	  'weight' => 10,
	  'type' => MENU_LOCAL_TASK,
	);

  return $items;
}

/**
 * Implements hook_permission().
 */
function registration_permission() {
  return array(
    'administer registration' =>  array(
      'title' => t('Administer registration'),
      'description' => t('Perform administration tasks for Registrations.'),
      'restrict access' => TRUE,
    ),
    'view registration' => array(
      'title' => t('View registrations'),
    ),
    'add registration' => array(
      'title' => t('Add registrations'),
    )
  );
}

/**
 * Landing page for managing the structure of registrations.
 */
function registration_admin_page() {
	$rows = array();
	foreach (node_type_get_names() as $type => $name) {
		$rows[] = array(
			l($name, 'admin/structure/types/manage/' . $type),
			(variable_get('registration_node_status_' . $type, 0)) ? t('Enabled') : 
				t('Disabled')
		);
	}
	
  $table = array(
    'header' => array(t('Content type'), t('Registration status')),
    'rows' => $rows,
  );	
	$out = theme('table', $table);

  return t('Manage extra fields for your registration here.') . $out;
}

/**
 * Page for viewing a single registraiton.
 */
function registration_page_view($registration, $view_mode = 'full') {
  return entity_build_content('registration', $registration, $view_mode);
}

/**
 * Page title callback.
 */
function registration_page_title($registration) {
  // use the node title in the registration page title
  if ($node = node_load($registration->nid)) {
    return t('Registration for @title', array('@title' => $node->title));
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 	 Add registration options to node type form.
 */
function registration_form_node_type_form_alter(&$form, &$form_state) {	
	$type = $form['#node_type']->type;
	
  $form['registration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration settings'),
    '#group' => 'additional_settings',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['registration']['registration_node_status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable registrations for this content type'),
    '#default_value' => variable_get('registration_node_status_' . $type, 0),
    '#description' => t('If enabled, users will be allowed to register for this 
			content type unless an administrator disbles registrations on specific 
			posts.'),
  );
}

/**
 * Implements hook_node_type_delete().
 */
function registration_node_type_delete($info) {
  variable_del('registration_node_status' . $info->type);
}

/**
 * Access callback for registration_register_page().
 */
function registration_register_page_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer registration')) {
      $ret = TRUE;
    }
    else if (user_access('add registration') && registration_has_room($node)) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Access callback for registration_registrations_page().
 */
function registration_administer_registrations_access($node) {
  $ret = FALSE;
  if (variable_get('registration_node_status_' . $node->type, 0)) {
    if (user_access('administer mkc_registration')) {
      $ret = TRUE;
    }
  }

  return $ret;
}

/**
 * Page callback for adding a registration.
 */
function registration_register_page($node) {
  $registration = entity_get_controller('registration')->create(array('type' => 'registration'));
  $registration->nid = $node->nid;
  return drupal_get_form('registration_form', $registration);
}

/**
 * Page callback for viewing a tour's registrations
 */
function registration_registrations_page($node) {
  drupal_set_title(t('Registrations for !title', array('!title' => $node->title)));
  $query = new EntityFieldQuery;
  $query
     ->entityCondition('entity_type', 'registration')
     ->propertyCondition('nid', $node->nid);
  $result = $query->execute();
	$registrations = registration_load_multiple(array_keys($result['registration']));
	dpm($registrations);
	
	$rows = array();
	foreach ($registrations as $registration) {
		// dpm($registration);
		$rows[] = array(
			l($registration->registration_id, 'registration/' . $registration->registration_id),
			$registration->user_uid,
			$registration->author_uid,
			date('m/s/Y t', $registration->created),
		);
	}
	
  $table = array(
    'header' => array(t('id'), t('User'), t('Created By'), t('Created')),
    'rows' => $rows,
  );	
	$out = theme('table', $table);
	
  return $out;
}

/**
 * Helper to determine if a tour has any slots left.
 */
function registration_has_room($node) {
  $ret = FALSE;
  if (isset($node->field_limit['und'][0]['value'])) {
    $limit = $node->field_limit['und'][0]['value'];
    $count = db_query("SELECT count(nid) FROM {registration} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
    if ($count < $limit) {
      $ret = TRUE;
    }
  }

  return $ret;
}


/**
 * Returns a list of content types that have registrations enabled
 */
// function registration_content_types() {
//   $enabled_types = array();
//   foreach (node_type_get_names() as $type => $name) {
//     if (variable_get('registration_node_status_' . $type, 0)) {
//       $enabled_types[$type] = $name;
//     }
//   }
// 
//   return $enabled_types;
// }
// 
